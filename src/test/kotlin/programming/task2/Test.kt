/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */

package programming.task2

import com.github.ajalt.clikt.core.NoSuchOption
import com.github.ajalt.clikt.core.PrintHelpMessage
import kotlin.test.Test
import kotlin.test.assertEquals
import org.junit.jupiter.api.Assertions.assertThrows
import java.io.File
import kotlin.test.assertFailsWith


class Test {

  @Test
  fun compressionTest() {
       val packRLE = PackRLE()
       assertEquals("3W3B\nN2M", packRLE.compression("src/test/resources/compression1.txt"))

       assertEquals("A\n4OB\n4B3N\n" +
               "MN", packRLE.compression("src/test/resources/compression2.txt"))

       assertThrows(IllegalArgumentException::class.java)
       { packRLE.compression("src/test/resources/compression3.txt") }

       assertThrows(IllegalArgumentException::class.java)
       { packRLE.compression("src/test/resources/compression4.txt") }

       assertEquals("8A8O 8B4N2B 6C\n\nQEQEQEQE6J 3N M\n\n\nB",
          packRLE.compression("src/test/resources/compression5.txt"))
   }

   @Test
   fun expansionTest() {
       val packRLE = PackRLE()
       assertEquals("BBBBBBBBBBNFFFF", packRLE.expansion("src/test/resources/expansion1.txt"))

       assertEquals("BB\nKKK\nNNN\nM", packRLE.expansion("src/test/resources/expansion2.txt"))

       assertEquals("MMMNNNC\n\nIIIJ\n\n\nO",
           packRLE.expansion("src/test/resources/expansion3.txt"))
   }

    @Test
   fun test() {
        val packRLE = PackRLE()
        val actualOne = File("src/test/resources/output1.txt").readText()
        val expectedOne = "HE2LO IT IS T3EST\n" +
                "2M2P 2N\n" +
                "\n" +
                "3A"
        packRLE.assembleFile(true, "src/test/resources/input1.txt",
            "src/test/resources/output1.txt")
        assertEquals(expectedOne, actualOne)

        val actualTwo = File("src/test/resources/output2.txt").readText()
        val expectedTwo = "BBBBB III\n" +
                "\n" +
                "WWWWWB"
        packRLE.assembleFile(false,"src/test/resources/input2.txt",
            "src/test/resources/output2.txt")
        assertEquals(expectedTwo, actualTwo)
   }

    @Test
    fun errors() {
        assertFailsWith<NoSuchOption>{ main(arrayOf("-y"))}
        assertFailsWith<NoSuchOption>{ main(arrayOf("-j"))}
        assertFailsWith<NoSuchOption>{ main(arrayOf("-x"))}
        assertFailsWith<PrintHelpMessage>{main(arrayOf("--help"))}
        assertFailsWith<PrintHelpMessage>{main(arrayOf("-h"))}
    }
}