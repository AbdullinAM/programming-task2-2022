/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package programming.task2;

import org.junit.jupiter.api.Test;
import org.kohsuke.args4j.CmdLineException;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void testGrep() throws IOException {
        List<String> result = new Grep().Grep(false, false, "Name", "InputName.txt");
        List<String> answer = new ArrayList();
        answer.add("-oe OutputEncoding InputName OutputName");
        answer.add("◦ InputName – имя входного файла");
        answer.add("◦ OutputName – Пребуемое имя выходного файла");
        assertEquals(answer, result);
    }
    @Test void testGrepIC() throws IOException {
        List<String> result = new Grep().Grep(false, true, "Name", "InputName.txt");
        List<String> answer = new ArrayList();
        answer.add("java –jar appname.jar –ie InputEncoding word");
        answer.add("-oe OutputEncoding InputName OutputName");
        answer.add("◦ InputName – имя входного файла");
        answer.add("◦ OutputName – Пребуемое имя выходного файла");
        assertEquals(answer, result);
    }
    @Test void testGrepNot() throws IOException {
        List<String> result = new Grep().Grep(true, false, " ", "InputName.txt");
        List<String> answer = new ArrayList();
        answer.add("файл");
        assertEquals(answer, result);
    }
    @Test void testGrepNotIc() throws IOException {
        List<String> result = new Grep().Grep(true, true, "Name", "InputName.txt");
        List<String> answer = new ArrayList();
        answer.add("Приложение должно запускаться так:");
        answer.add("\uF07D Здесь");
        answer.add("◦ word InputEncoding – кодировка входного файла");
        answer.add("◦ OutputEncoding – требуемая кодпировка");
        answer.add("файл");
        assertEquals(answer, result);
    }
    @Test void testGrepRg() throws IOException {
        List<String> result = new Grep().GrepRg(false, false, "файл.+", "InputName.txt");
        List<String> answer = new ArrayList();
        answer.add("◦ word InputEncoding – кодировка входного файла");
        answer.add("◦ InputName – имя входного файла");
        answer.add("◦ OutputName – Пребуемое имя выходного файла");
        assertEquals(answer, result);
    }
    @Test void testGrepRgIc() throws IOException {
        List<String> result = new Grep().GrepRg(false, true, "I", "InputName.txt");
        List<String> answer = new ArrayList();
        answer.add("java –jar appname.jar –ie InputEncoding word");
        answer.add("-oe OutputEncoding InputName OutputName");
        answer.add("◦ word InputEncoding – кодировка входного файла");
        answer.add("◦ OutputEncoding – требуемая кодпировка");
        answer.add("◦ InputName – имя входного файла");
        assertEquals(answer, result);
    }
    @Test void testGrepRgNot() throws IOException {
        List<String> result = new Grep().GrepRg(true, false, "файл.+", "InputName.txt");
        List<String> answer = new ArrayList();
        answer.add("Приложение должно запускаться так:");
        answer.add("java –jar appname.jar –ie InputEncoding word");
        answer.add("-oe OutputEncoding InputName OutputName");
        answer.add("\uF07D Здесь");
        answer.add("◦ OutputEncoding – требуемая кодпировка");
        answer.add("файл");
        assertEquals(answer, result);
    }
    @Test void testGrepRgNotIc() throws IOException {
        List<String> result = new Grep().GrepRg(true, true, "ФАЙЛ.+", "InputName.txt");
        List<String> answer = new ArrayList();
        answer.add("Приложение должно запускаться так:");
        answer.add("java –jar appname.jar –ie InputEncoding word");
        answer.add("-oe OutputEncoding InputName OutputName");
        answer.add("\uF07D Здесь");
        answer.add("◦ OutputEncoding – требуемая кодпировка");
        answer.add("файл");
        assertEquals(answer, result);
    }
    @Test void testIOExceptionCatch() throws IOException {
        IOException exception = assertThrows(IOException.class, () -> {
            List<String> result = new Grep().GrepRg(false,  false, "файл.+", "InutName.txt");
        });
    }
/* тест не работает, тк мы ловим ошибку, она ловится до того, как мы можем ее проверить.
        @Test void testCmdLineExceptionCatch() throws IOException {
        CmdLineException exception = assertThrows(CmdLineException.class, () -> {
            Parse.main("-v -i -r word word InputName.txt ".split("\s"));
        });
   }
*/

}
