/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package programming.task2

import java.io.File

class PackRLE {
    fun compression(pathToTheFolder: String): String {
        val result = StringBuilder()
        for (string in File(pathToTheFolder).readLines()) {
            if (Regex("""[0-9]+""", RegexOption.IGNORE_CASE).containsMatchIn(string)) {
                throw IllegalArgumentException("Sequence must contain only letters")
            }
            var indexOfLetter = 0
            if (string.length == 1) {
                result.append(string + "\n")
            } else {
                while (indexOfLetter <= string.length - 1) {
                    if (indexOfLetter + 1 != string.length) {
                        var counter = 1
                        while (string[indexOfLetter] == string[indexOfLetter + 1]) {
                            counter++
                            indexOfLetter++
                            if (indexOfLetter + 1 == string.length) break
                        }
                        if (counter > 1) result.append("$counter" + string[indexOfLetter])
                        else result.append(string[indexOfLetter])
                        indexOfLetter++
                    } else {
                        result.append(string[indexOfLetter])
                        indexOfLetter++
                    }
                }
                result.append("\n")
            }
        }
        return result.dropLast(1).toString()
    }

    fun expansion(pathToTheFolder: String): String {
        val result = StringBuilder()
        val splitString = File(pathToTheFolder).readLines()
        for (i in splitString) {
            var indexInString = 0
            while (indexInString <= i.length - 1) {
                var numberOfLetters = 0
                var nextNumber = indexInString
                if (i[nextNumber].isDigit()) {
                    var c = 0
                    while (i[nextNumber].isDigit()) {
                        numberOfLetters = numberOfLetters * 10 + i[nextNumber].digitToInt()
                        nextNumber++
                        c++
                    }
                    for (j in 1..numberOfLetters) result.append(i[nextNumber])
                    indexInString += c + 1
                } else {
                    result.append(i[indexInString])
                    indexInString++
                }
            }
            result.append("\n")
        }
        return result.dropLast(1).toString()
    }

    fun assembleFile(toPack:Boolean, toUnpack: Boolean, outputName: String?, inputName: String) {
        val writer = File(outputName ?: inputName).bufferedWriter()
        if (toPack) writer.write(compression(inputName))
        if (toUnpack) writer.write(expansion(inputName))
        writer.close()
    }
}