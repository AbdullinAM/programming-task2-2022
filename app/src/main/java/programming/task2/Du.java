/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package programming.task2;


import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.util.*;

public class Du {
    public enum Base {
        StandardBase(1024),
        DecimalBase(1000);
        private final int x;

        Base(int x) {
            this.x = x;
        }
    }

    List<String> PostFix = Arrays.asList("B", "KB", "MB", "GB");
    long totalSize = 0;

    // Размер папки
      public long directorySize(File directory) {
              long length = 0;
              for (File file : Objects.requireNonNull(directory.listFiles())) {
                  if (file.isFile())
                      length += file.length();
                  else
                      length += directorySize(file);
              }
              return length;
          }

    // Размер папки/файла в соответствии с заданными параметрами
    public String outputSize(String inputName, boolean hMark, boolean siMark, boolean cMark) {
        File file = new File(inputName);
        long size = 0;

        if (file.isFile()) size = file.length();
        else if (file.isDirectory()) size = directorySize(file);

        if (!file.exists()) throw new IllegalArgumentException();

        return toHumanRead(size, siMark, hMark, cMark);
    }

    // перебор всех заданных файлов для формирования ассоциативного массива с соответствием: название файла - размер
    public void fileEnumeration(List<String> list, boolean hMark, boolean siMark, boolean cMark) {
       //   Map<String, String> map = new LinkedHashMap<>();

            for (int i = 0; i < list.size(); i++) {
                System.out.print(list.get(i));
                System.out.print(" = ");
                System.out.println(outputSize(list.get(i), hMark, siMark, cMark));
             //   map.put(list.get(i), outputSize(list.get(i), hMark, siMark, cMark));
            }
            if (cMark) {
                System.out.print("Total size = ");
                System.out.println(toHumanRead(totalSize, siMark, hMark, true));
            }
            // if (cMark) map.put("Total size", toHumanRead(totalSize, siMark, hMark, true));
          //  return map;
    }

    // перевод размера согласно заданным параметрам
    public String toHumanRead(long size, boolean siMark, boolean hMark, boolean cMark) {
        StringBuilder result = new StringBuilder();
        int base = Base.StandardBase.x;
        if (siMark) base = Base.DecimalBase.x;

        if (cMark) totalSize += size;

        if (hMark) {
            int k = 0;
            while (size > 1023 && k < 3) {
                size /= base;
                k++;
            }
            result.append(size).append(PostFix.get(k));
        } else if (size > 1023) result.append(size / base);
        else result.append(1);

        return result.toString();
    }
}